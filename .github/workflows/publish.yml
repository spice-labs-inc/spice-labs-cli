name: Publish The Spice Labs CLI Container Images

on:
  push:
    branches:
      - main
      - mj/scan-itself
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  REPO: ${{ github.event.repository.name }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  publish_jars:
    name: Publish CLI JARs to GitHub Packages & Maven Central
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.tag.outputs.version }}
      release_timestamp: ${{ steps.release-notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release-notification.outputs.channel_id }}
      maven_should_publish: ${{ steps.maven_gate.outputs.should_publish }}

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Compute version
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            RAW="${{ github.event.release.tag_name }}"
          else
            RAW="${{ github.ref_name }}"
          fi
          if [[ ! "$RAW" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "❌ Tag '$RAW' is not semver (v*.*.*)"; exit 1
          fi
          echo "version=${RAW#v}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release from tag
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Wait for release propagation
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set +e
          TAG="${{ github.ref_name }}"
          for i in {1..20}; do
            gh api "repos/${GITHUB_REPOSITORY}/releases/tags/${TAG}" >/dev/null 2>&1 && break
            echo "Release for ${TAG} not visible yet; retry ${i}/20"
            sleep 3
          done

      - name: Notify release (Slack)
        id: release-notification
        uses: spice-labs-inc/action-release-notification@main
        continue-on-error: true
        with:
          type: release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          github-token: ${{ github.token }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set up JDK 21 and Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          server-id: github
          server-username: ${{ secrets.GH_USERNAME_SG }}
          server-password: ${{ secrets.GH_TOKEN }}
          token: ${{ github.token }}
          gpg-private-key: ${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Write settings.xml for GitHub + Maven Central
        shell: bash
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github-spice-labs-goatrodeo</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>github-spice-labs-ginger</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>github</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>default-repos</id>
                <repositories>
                  <repository>
                    <id>github-spice-labs-goatrodeo</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/goatrodeo</url>
                  </repository>
                  <repository>
                    <id>github-spice-labs-ginger</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/ginger-j</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>default-repos</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Import GPG key
        shell: bash
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Update version in pom.xml
        run: mvn --batch-mode versions:set -DnewVersion=${{ steps.tag.outputs.version }} -DgenerateBackupPoms=false

      - name: Decide Maven publish
        id: maven_gate
        shell: bash
        run: |
          SHOULD=false
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            git fetch --no-tags origin main
            if git merge-base --is-ancestor "$GITHUB_SHA" "origin/main"; then
              SHOULD=true
            fi
          fi
          echo "should_publish=$SHOULD" >> "$GITHUB_OUTPUT"

      - name: Build (no tests)
        run: mvn --batch-mode -DskipTests package

      - name: Build and publish JARs (GitHub Packages)
        if: steps.maven_gate.outputs.should_publish == 'true'
        run: mvn --batch-mode clean deploy -P github
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Build and publish JARs (Maven Central)
        if: steps.maven_gate.outputs.should_publish == 'true'
        run: mvn --batch-mode clean deploy -P maven-central
        env:
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Skipping Maven publish (not a main semver tag)
        if: steps.maven_gate.outputs.should_publish != 'true'
        run: |
          echo "Skipping Maven deploy: require semver tag on main"

      - name: Scan built artifacts with Spice-Labs CLI
        shell: bash
        env:
          SPICE_PASS: ${{ secrets.SPICE_PASS }}
        run: |
          docker run --rm \
            -v "$PWD/target:/mnt/input:ro" \
            -e SPICE_PASS \
            spicelabs/spice-labs-cli:${{ steps.tag.outputs.version }} \
            --input /mnt/input \
            --tag "spice-labs-cli-${{ steps.tag.outputs.version }}"

      - name: Resolve Maven coordinates
        id: gav
        run: |
          GROUP_ID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          ARTIFACT_ID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          echo "group_id=$GROUP_ID" >> "$GITHUB_OUTPUT"
          echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_OUTPUT"

      - name: Link to Maven Central Deployment
        if: always()
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          GROUP_ID="${{ steps.gav.outputs.group_id }}"
          ARTIFACT_ID="${{ steps.gav.outputs.artifact_id }}"
          echo "Check deployment status in Sonatype Central:"
          echo "https://central.sonatype.com/publishing/deployments?name=${GROUP_ID}:${ARTIFACT_ID}&version=${VERSION}"

      - name: Upload wrapper scripts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            spice
            spice.ps1
            install.sh
            install.ps1

  docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-24.04
    needs: publish_jars
    if: needs.publish_jars.outputs.maven_should_publish == 'true'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download fat jar from GH Packages
        run: |
          mkdir -p target
          curl -fL -o "target/spice-labs-cli-${{ needs.publish_jars.outputs.version }}-fat.jar" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            "https://maven.pkg.github.com/spice-labs-inc/spice-labs-cli/io/spicelabs/spice-labs-cli/${{ needs.publish_jars.outputs.version }}/spice-labs-cli-${{ needs.publish_jars.outputs.version }}-fat.jar"

      - name: Check if release is a pre-release
        id: prerelease
        run: |
          IS_PRERELEASE=$(gh release view ${{ github.ref_name }} --json isPrerelease -q '.isPrerelease' || echo "false")
          echo "is_prerelease=$IS_PRERELEASE" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: spicelabs/spice-labs-cli
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          flavor: |
            latest=${{ steps.prerelease.outputs.is_prerelease == 'false' }}

      - name: Build and Push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          provenance: mode=max
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate SLSA Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: spicelabs/spice-labs-cli
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  notify:
    needs: [publish_jars, docker_image]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Compute status
        id: deployment-status
        shell: bash
        run: |
          JAR_STATUS="${{ needs.publish_jars.result }}"
          DOCKER_STATUS="${{ needs.docker_image.result }}"
          OK_JAR=$([ "$JAR_STATUS" = "success" ] || [ "$JAR_STATUS" = "skipped" ] && echo true || echo false)
          OK_DOCKER=$([ "$DOCKER_STATUS" = "success" ] || [ "$DOCKER_STATUS" = "skipped" ] && echo true || echo false)
          if [ "$OK_JAR" = "true" ] && [ "$OK_DOCKER" = "true" ]; then
            echo "overall_status=deployment-success" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=deployment-failure" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release - Publishing failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify deployment result
        uses: spice-labs-inc/action-release-notification@main
        continue-on-error: true
        with:
          type: ${{ steps.deployment-status.outputs.overall_status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          workflow-name: ${{ steps.deployment-status.outputs.workflow_name }}
          environment: production
          thread-ts: ${{ needs.publish_jars.outputs.release_timestamp }}
          channel-id: ${{ needs.publish_jars.outputs.release_channel_id }}
          github-token: ${{ github.token }}
        env:
          GITHUB_TOKEN: ${{ github.token }}


