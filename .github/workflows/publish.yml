name: Publish The Spice Labs CLI Container Images

on:
  release:
    types: [published]

env:
  PLATFORMS: linux/amd64, linux/arm64
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish_jars:
    name: Publish CLI JARs to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.validate.outputs.VERSION }}
      release_timestamp: ${{ steps.release-notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release-notification.outputs.channel_id }}

    steps:
      - name: Notify release
        id: release-notification
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          github-token: ${{ github.token }}

      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Validate and extract version from tag
        id: validate
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Tag does not match semantic version pattern v*.*.*" >&2
            exit 1
          fi

      - name: Set up JDK 21 and GitHub Maven auth
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          server-id: github
          server-username: ${{ secrets.GH_USERNAME_SG }}
          server-password: ${{ secrets.GH_TOKEN }}
          token: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          gpg-private-key: ${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Write settings.xml for GitHub + Maven Central
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">

            <servers>
              <server>
                <id>github-spice-labs-goatrodeo</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>github-spice-labs-ginger</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>github</id>
                <username>${{ secrets.GH_USERNAME_SG }}</username>
                <password>${{ secrets.GH_TOKEN }}</password>
              </server>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>

            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>github-spice-labs-goatrodeo</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/goatrodeo</url>
                  </repository>
                  <repository>
                    <id>github-spice-labs-ginger</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/ginger-j</url>
                  </repository>
                </repositories>
              </profile>

              <profile>
                <id>maven-central</id>
                <repositories>
                  <repository>
                    <id>github-spice-labs-goatrodeo</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/goatrodeo</url>
                  </repository>
                  <repository>
                    <id>github-spice-labs-ginger</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/ginger-j</url>
                  </repository>
                </repositories>
              </profile>
              
              <profile>
                <id>default-repos</id>
                <repositories>
                  <repository>
                    <id>github-spice-labs-goatrodeo</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/goatrodeo</url>
                  </repository>
                  <repository>
                    <id>github-spice-labs-ginger</id>
                    <url>https://maven.pkg.github.com/spice-labs-inc/ginger-j</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            
            <activeProfiles>
              <activeProfile>default-repos</activeProfile>
            </activeProfiles>

          </settings>
          EOF

      - name: Import GPG key
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Update version in pom.xml using Maven plugin
        run: mvn --batch-mode versions:set -DnewVersion=${{ steps.validate.outputs.VERSION }} -DgenerateBackupPoms=false

      - name: Build and publish all jars (regular + fat)
        id: build-jars-github
        run: mvn --batch-mode clean deploy -P github
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Build and publish all jars (regular + fat)
        id: build-jars-maven-central
        run: mvn --batch-mode clean deploy -P maven-central
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Upload wrapper scripts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            spice
            spice.ps1
            install.sh
            install.ps1

      - name: Index and upload ADG
        uses: spice-labs-inc/action-spice-labs-cli-scan@v3
        with:
          spice_pass: "${{ secrets.SPICE_PASS }}"
          file_path: "./target"
          tag: "${{ github.event.repository.name }}"
          cli_image: spicelabs/spice-labs-cli:0.2.29

  docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: publish_jars
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download fat jar
        run: |
          mkdir -p target
          curl -fL -o target/spice-labs-cli-${{ needs.publish_jars.outputs.version }}-fat.jar \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            "https://maven.pkg.github.com/spice-labs-inc/spice-labs-cli/io/spicelabs/spice-labs-cli/${{ needs.publish_jars.outputs.version }}/spice-labs-cli-${{ needs.publish_jars.outputs.version }}-fat.jar"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Check if release is a pre-release
        id: prerelease
        run: |
          IS_PRERELEASE=$(gh release view ${{ github.ref_name }} --json isPrerelease -q '.isPrerelease')
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: spicelabs/spice-labs-cli
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          flavor: |
            latest=${{ steps.prerelease.outputs.is_prerelease == 'false' }}

      - name: Build and Push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          provenance: mode=max
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  notify:
    needs: [publish_jars, docker_image]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        id: deployment-status
        shell: bash
        run: |
          # Check job outcomes
          JAR_STATUS="${{ needs.publish_jars.result }}"
          DOCKER_STATUS="${{ needs.docker_image.result }}"
          
          # Determine overall success
          if [ "$JAR_STATUS" == "success" ] && [ "$DOCKER_STATUS" == "success" ]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All components deployed successfully!" >> $GITHUB_OUTPUT
          else
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            
            # Build detailed failure message
            MESSAGE="❌ Deployment failed:"
            if [ "$JAR_STATUS" != "success" ]; then
              MESSAGE="$MESSAGE ❌ JAR publishing failed."
            else
              MESSAGE="$MESSAGE ✅ JAR publishing succeeded."
            fi
            
            if [ "$DOCKER_STATUS" != "success" ]; then
              MESSAGE="$MESSAGE ❌ Docker build/push failed."
            else
              MESSAGE="$MESSAGE ✅ Docker build/push succeeded."
            fi
            
            echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment result
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: ${{ steps.deployment-status.outputs.overall_status == 'success' && 'deployment-success' || 'deployment-failure' }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          workflow-name: ${{ steps.deployment-status.outputs.overall_status == 'success' && 'Release' || format('Release - {0}', steps.deployment-status.outputs.message) }}
          environment: production
          thread-ts: ${{ needs.publish_jars.outputs.release_timestamp }}
          channel-id: ${{ needs.publish_jars.outputs.release_channel_id }}
